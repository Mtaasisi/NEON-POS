╔════════════════════════════════════════════════════════════════╗
║           AUTO-REORDER QUICK COMMAND REFERENCE                  ║
╚════════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 📋 SETUP COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Already installed! Skip to "USAGE COMMANDS" below.

To reinstall:
psql <connection> -f IMPLEMENT-AUTO-REORDER-FEATURE.sql

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 🎯 USAGE COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. SET REORDER POINTS (Do this for each product)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Set reorder point for specific product
UPDATE lats_product_variants
SET reorder_point = 10
WHERE product_id = (SELECT id FROM lats_products WHERE name = 'iPhone 14');

-- Set reorder points for multiple products
UPDATE lats_product_variants
SET reorder_point = 15
WHERE product_id IN (
  SELECT id FROM lats_products 
  WHERE name IN ('iPhone 14', 'Samsung S24', 'MacBook Pro')
);

-- Set reorder point to 20% of current stock for all products
UPDATE lats_product_variants
SET reorder_point = GREATEST(FLOOR(quantity * 0.2), 5)
WHERE quantity > 0;

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 📊 MONITORING COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

2. VIEW AUTO-REORDER STATUS
━━━━━━━━━━━━━━━━━━━━━━━━━━

-- See all products with reorder points
SELECT * FROM auto_reorder_status;

-- See only low stock items
SELECT * FROM auto_reorder_status
WHERE stock_status IN ('BELOW_REORDER_POINT', 'OUT_OF_STOCK');

3. VIEW AUTO-GENERATED POs
━━━━━━━━━━━━━━━━━━━━━━━━━

-- See all auto-generated purchase orders
SELECT 
  po.po_number,
  po.status,
  po.total_amount,
  s.name as supplier,
  po.created_at
FROM lats_purchase_orders po
LEFT JOIN lats_suppliers s ON s.id = po.supplier_id
WHERE po.po_number LIKE 'PO-AUTO-%'
ORDER BY po.created_at DESC;

-- See pending draft POs
SELECT * FROM lats_purchase_orders
WHERE po_number LIKE 'PO-AUTO-%' AND status = 'draft';

4. VIEW AUTO-REORDER HISTORY/LOG
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

SELECT 
  p.name as product,
  arl.triggered_quantity as stock_when_triggered,
  arl.reorder_point,
  arl.suggested_quantity as ordered,
  arl.po_created as success,
  arl.error_message,
  arl.created_at,
  po.po_number
FROM auto_reorder_log arl
JOIN lats_products p ON p.id = arl.product_id
LEFT JOIN lats_purchase_orders po ON po.id = arl.purchase_order_id
ORDER BY arl.created_at DESC
LIMIT 20;

5. MANUALLY CHECK ALL PRODUCTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Force a check of all products right now
SELECT * FROM check_all_products_for_reorder();

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 ⚙️  CONFIGURATION COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

6. VIEW CURRENT SETTINGS
━━━━━━━━━━━━━━━━━━━━━━━

SELECT setting_key, setting_value, description
FROM admin_settings
WHERE category = 'inventory'
  AND setting_key IN (
    'auto_reorder_enabled',
    'auto_create_po_at_reorder',
    'minimum_order_quantity',
    'maximum_stock_level',
    'safety_stock_level'
  );

7. ENABLE/DISABLE AUTO-REORDER
━━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Enable
UPDATE admin_settings 
SET setting_value = 'true' 
WHERE category = 'inventory' AND setting_key = 'auto_reorder_enabled';

-- Disable
UPDATE admin_settings 
SET setting_value = 'false' 
WHERE category = 'inventory' AND setting_key = 'auto_reorder_enabled';

8. ADJUST SETTINGS
━━━━━━━━━━━━━━━━

-- Change minimum order quantity
UPDATE admin_settings
SET setting_value = '5'
WHERE category = 'inventory' AND setting_key = 'minimum_order_quantity';

-- Change maximum stock level
UPDATE admin_settings
SET setting_value = '500'
WHERE category = 'inventory' AND setting_key = 'maximum_stock_level';

-- Change safety stock
UPDATE admin_settings
SET setting_value = '10'
WHERE category = 'inventory' AND setting_key = 'safety_stock_level';

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 🔧 MAINTENANCE COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

9. CHECK IF FEATURE IS INSTALLED
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Check functions
SELECT COUNT(*) as function_count
FROM pg_proc 
WHERE proname LIKE '%auto%reorder%';
-- Should return > 5

-- Check trigger
SELECT COUNT(*) as trigger_count
FROM pg_trigger 
WHERE tgname = 'trigger_auto_reorder';
-- Should return 1

-- Check table
SELECT COUNT(*) as log_entries
FROM auto_reorder_log;

10. CLEAR OLD LOGS (OPTIONAL)
━━━━━━━━━━━━━━━━━━━━━━━━━━━

-- Delete logs older than 90 days
DELETE FROM auto_reorder_log
WHERE created_at < NOW() - INTERVAL '90 days';

11. TEST THE FEATURE
━━━━━━━━━━━━━━━━━━

-- Run automated test
node test-auto-reorder.mjs

-- OR run SQL verification
psql <connection> -f VERIFY-AUTO-REORDER-WORKING.sql

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 📈 REPORTING COMMANDS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

12. PRODUCTS NEEDING ATTENTION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━

SELECT 
  p.name,
  pv.quantity as current_stock,
  pv.reorder_point,
  pv.quantity - pv.reorder_point as buffer,
  CASE 
    WHEN pv.quantity <= 0 THEN '🔴 OUT OF STOCK'
    WHEN pv.quantity <= pv.reorder_point THEN '🟠 BELOW REORDER'
    WHEN pv.quantity <= pv.reorder_point * 1.5 THEN '🟡 LOW STOCK'
    ELSE '🟢 OK'
  END as status
FROM lats_product_variants pv
JOIN lats_products p ON p.id = pv.product_id
WHERE pv.reorder_point > 0
  AND p.is_active = true
ORDER BY (pv.quantity - pv.reorder_point) ASC;

13. AUTO-REORDER PERFORMANCE
━━━━━━━━━━━━━━━━━━━━━━━━━━

SELECT 
  COUNT(*) as total_events,
  SUM(CASE WHEN po_created THEN 1 ELSE 0 END) as successful,
  SUM(CASE WHEN NOT po_created THEN 1 ELSE 0 END) as failed,
  ROUND(100.0 * SUM(CASE WHEN po_created THEN 1 ELSE 0 END) / COUNT(*), 2) as success_rate
FROM auto_reorder_log;

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 💡 COMMON USE CASES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Daily Morning Check:
━━━━━━━━━━━━━━━━━━
SELECT * FROM auto_reorder_status WHERE stock_status != 'OK';
SELECT * FROM lats_purchase_orders WHERE po_number LIKE 'PO-AUTO-%' AND status = 'draft';

Weekly Review:
━━━━━━━━━━━━
SELECT * FROM auto_reorder_log WHERE created_at > NOW() - INTERVAL '7 days';

Set up new product:
━━━━━━━━━━━━━━━━━
UPDATE lats_product_variants
SET reorder_point = 20
WHERE product_id = (SELECT id FROM lats_products WHERE name = 'New Product');

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

For full documentation, see: AUTO-REORDER-GUIDE.md
For quick start, see: 🚀-AUTO-REORDER-QUICK-START.md
For installation status, see: ✅-AUTO-REORDER-INSTALLATION-COMPLETE.md

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

