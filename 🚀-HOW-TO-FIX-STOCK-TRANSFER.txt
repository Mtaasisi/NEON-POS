╔══════════════════════════════════════════════════════════════════════════════╗
║                  STOCK TRANSFER FIX - IMPLEMENTATION GUIDE                   ║
║                            STEP-BY-STEP INSTRUCTIONS                         ║
╚══════════════════════════════════════════════════════════════════════════════╝

This guide will walk you through fixing all 12 critical issues in your Stock
Transfer Management system. Follow the steps in order.

═══════════════════════════════════════════════════════════════════════════════
📋 PREREQUISITES - READ FIRST!
═══════════════════════════════════════════════════════════════════════════════

BEFORE APPLYING FIXES:

✅ BACKUP YOUR DATABASE
   Run this in your Neon SQL editor:
   
   -- Create backup tables
   CREATE TABLE branch_transfers_backup AS SELECT * FROM branch_transfers;
   CREATE TABLE lats_product_variants_backup AS SELECT * FROM lats_product_variants;
   CREATE TABLE lats_stock_movements_backup AS SELECT * FROM lats_stock_movements;

✅ VERIFY NO TRANSFERS ARE IN PROGRESS
   Check for any transfers currently being processed:
   
   SELECT * FROM branch_transfers 
   WHERE status IN ('approved', 'in_transit') 
   ORDER BY updated_at DESC;

   If any exist, either complete them manually or wait.

✅ REVIEW EXISTING TRANSFERS
   Check the current state:
   
   SELECT status, COUNT(*) as count
   FROM branch_transfers
   GROUP BY status;


═══════════════════════════════════════════════════════════════════════════════
🔧 STEP 1: APPLY DATABASE FIXES
═══════════════════════════════════════════════════════════════════════════════

TIME ESTIMATE: 2-3 minutes

1. Open your Neon Dashboard (https://console.neon.tech)

2. Navigate to your database → SQL Editor

3. Copy the ENTIRE contents of this file:
   📁 🔧-COMPLETE-STOCK-TRANSFER-FIX.sql

4. Paste it into the SQL Editor

5. Click "Run" (or press Ctrl+Enter / Cmd+Enter)

6. Wait for execution (should take 10-30 seconds)

7. Check for SUCCESS MESSAGE at the bottom:
   "✅ STOCK TRANSFER SYSTEM - COMPLETE FIX APPLIED"

8. Verify functions were created:
   
   SELECT proname 
   FROM pg_proc 
   WHERE proname LIKE '%stock%' OR proname LIKE '%variant%'
   ORDER BY proname;
   
   You should see:
   - check_duplicate_transfer
   - complete_stock_transfer_transaction
   - find_or_create_variant_at_branch
   - increase_variant_stock
   - reduce_variant_stock
   - release_variant_stock
   - reserve_variant_stock


═══════════════════════════════════════════════════════════════════════════════
💻 STEP 2: UPDATE YOUR FRONTEND CODE
═══════════════════════════════════════════════════════════════════════════════

TIME ESTIMATE: 2 minutes

OPTION A - Recommended (Rename and replace):

1. Rename your current file as backup:
   
   mv src/lib/stockTransferApi.ts src/lib/stockTransferApi.OLD.ts

2. Rename the new fixed file:
   
   mv src/lib/stockTransferApi.FIXED.ts src/lib/stockTransferApi.ts

3. Done!


OPTION B - Manual update (if you have custom changes):

1. Compare the files:
   
   # Using diff:
   diff src/lib/stockTransferApi.ts src/lib/stockTransferApi.FIXED.ts
   
   # Or use your IDE's compare feature

2. Manually merge the key changes:
   - Update completeStockTransfer function (lines 303-366)
   - Update createStockTransfer function (lines 125-185)
   - Update rejectStockTransfer function (lines 228-263)
   - Update cancelStockTransfer function (lines 371-403)
   - Add new helper functions at the top
   - Update all query selects to include variant details


═══════════════════════════════════════════════════════════════════════════════
🧪 STEP 3: TEST THE FIXES
═══════════════════════════════════════════════════════════════════════════════

TIME ESTIMATE: 10-15 minutes

Test Case 1: CREATE TRANSFER WITH STOCK RESERVATION
---------------------------------------------------

1. Go to Stock Transfer page in your app

2. Create a new transfer:
   - Select source branch
   - Select destination branch  
   - Select a product variant
   - Enter quantity: 5 units

3. ✅ CHECK: Transfer created successfully

4. Verify stock reservation:
   
   SELECT 
     variant_name,
     quantity,
     reserved_quantity,
     quantity - reserved_quantity as available
   FROM lats_product_variants
   WHERE id = 'YOUR_VARIANT_ID';
   
   Should show: reserved_quantity = 5

5. ✅ CHECK: Reserved quantity matches transfer quantity


Test Case 2: APPROVE TRANSFER
---------------------------------------------------

1. Find the pending transfer you just created

2. Try to approve it with THE SAME USER who created it

3. ✅ CHECK: Should show error "You cannot approve your own transfer request"

4. Login as different user or use different account

5. Approve the transfer

6. ✅ CHECK: Transfer status changes to "approved"

7. ✅ CHECK: Stock still reserved (not yet transferred)


Test Case 3: COMPLETE TRANSFER (MOST CRITICAL!)
---------------------------------------------------

1. Before completing, note the stock levels:
   
   SELECT 
     b.name as branch,
     v.variant_name,
     v.quantity,
     v.reserved_quantity
   FROM lats_product_variants v
   JOIN store_locations b ON b.id = v.branch_id
   WHERE v.id = 'YOUR_VARIANT_ID'
   ORDER BY b.name;

2. Mark transfer as "In Transit" (if not already)

3. Complete the transfer

4. ✅ CHECK: Transfer status changes to "completed"

5. ✅ CHECK: Source branch stock REDUCED by quantity

6. ✅ CHECK: Destination branch stock INCREASED by quantity

7. ✅ CHECK: Total stock across system remains the same!
   (This was the BUG - stock would disappear before!)

8. Verify stock movements logged:
   
   SELECT 
     movement_type,
     quantity,
     previous_quantity,
     new_quantity,
     reason,
     from_branch_id,
     to_branch_id
   FROM lats_stock_movements
   WHERE reference_id = 'YOUR_TRANSFER_ID'
   ORDER BY created_at;
   
   Should show TWO entries:
   - One for outgoing (negative quantity)
   - One for incoming (positive quantity)

9. ✅ CHECK: Audit trail complete with both movements


Test Case 4: REJECT TRANSFER
---------------------------------------------------

1. Create another transfer

2. Reject it with reason: "Out of season"

3. ✅ CHECK: Transfer status = "rejected"

4. ✅ CHECK: Original notes PRESERVED

5. ✅ CHECK: Rejection reason in separate field

6. Verify stock released:
   
   SELECT reserved_quantity 
   FROM lats_product_variants 
   WHERE id = 'YOUR_VARIANT_ID';

7. ✅ CHECK: Reserved quantity DECREASED by transfer amount


Test Case 5: CANCEL TRANSFER
---------------------------------------------------

1. Create a new transfer

2. Cancel it before approval

3. ✅ CHECK: Stock reservation released

4. Try to cancel already completed transfer

5. ✅ CHECK: Should fail or warn


Test Case 6: DUPLICATE PREVENTION
---------------------------------------------------

1. Create a transfer: Branch A → Branch B, Product X, Qty 10

2. Try to create another: Branch A → Branch B, Product X, Qty 5

3. ✅ CHECK: Should show error about duplicate pending transfer

4. Complete or reject the first transfer

5. Try creating the duplicate again

6. ✅ CHECK: Should now succeed (no pending conflict)


Test Case 7: VARIANT CREATION AT DESTINATION
---------------------------------------------------

1. Find a product that ONLY exists at Branch A

2. Create transfer from Branch A to Branch B

3. Approve and complete the transfer

4. Check destination branch inventory:
   
   SELECT * FROM lats_product_variants
   WHERE product_id = 'YOUR_PRODUCT_ID'
   AND branch_id = 'BRANCH_B_ID';

5. ✅ CHECK: New variant created at Branch B

6. ✅ CHECK: Variant has correct quantity

7. ✅ CHECK: Variant has unique SKU (original + branch suffix)


═══════════════════════════════════════════════════════════════════════════════
🔍 STEP 4: VERIFY ALL FIXES
═══════════════════════════════════════════════════════════════════════════════

Run this verification query:

SELECT 
  CASE 
    WHEN COUNT(*) FILTER (WHERE movement_type = 'transfer') > 0 
    THEN '✅ Issue #4 FIXED: Audit trail working'
    ELSE '❌ Issue #4 FAILED: No movements logged'
  END as issue_4,
  
  CASE
    WHEN MAX(COALESCE(reserved_quantity, 0)) > 0
    THEN '✅ Issue #9 FIXED: Stock reservation working'
    ELSE '⚠️ Issue #9: No reservations (may be normal if no pending transfers)'
  END as issue_9,
  
  CASE
    WHEN EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_name = 'branch_transfers' 
      AND column_name = 'rejection_reason'
    )
    THEN '✅ Issue #11 FIXED: Rejection reason column exists'
    ELSE '❌ Issue #11 FAILED: Missing rejection_reason column'
  END as issue_11

FROM lats_stock_movements
CROSS JOIN lats_product_variants;


Check Functions:

SELECT 
  CASE
    WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'complete_stock_transfer_transaction')
    THEN '✅ Issue #1, #2, #3 FIXED: Complete transfer function exists'
    ELSE '❌ CRITICAL: Transfer function missing!'
  END as issues_1_2_3,
  
  CASE
    WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'check_duplicate_transfer')
    THEN '✅ Issue #12 FIXED: Duplicate check function exists'
    ELSE '❌ Issue #12: Duplicate check missing'
  END as issue_12,
  
  CASE
    WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'reserve_variant_stock')
    THEN '✅ Issue #9 FIXED: Reservation function exists'
    ELSE '❌ Issue #9: Reservation function missing'
  END as issue_9_func;


═══════════════════════════════════════════════════════════════════════════════
🐛 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════════════

Problem: "Function complete_stock_transfer_transaction does not exist"
Solution: Re-run the SQL migration script (Step 1)

Problem: "Column rejection_reason does not exist"
Solution: Run this manually:
  ALTER TABLE branch_transfers ADD COLUMN rejection_reason TEXT;

Problem: "Column reserved_quantity does not exist"
Solution: Run this manually:
  ALTER TABLE lats_product_variants ADD COLUMN reserved_quantity INTEGER DEFAULT 0;

Problem: "Stock still disappearing after transfer"
Solution: 
  1. Check database function was created correctly
  2. Verify you're using the new API file (stockTransferApi.FIXED.ts)
  3. Clear browser cache and restart dev server

Problem: "Permission denied for function"
Solution: Run grants:
  GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO PUBLIC;

Problem: Transfer stuck in "approved" or "in_transit"
Solution: Manually complete in database:
  SELECT complete_stock_transfer_transaction('TRANSFER_ID', 'USER_ID');


═══════════════════════════════════════════════════════════════════════════════
📊 MONITORING & MAINTENANCE
═══════════════════════════════════════════════════════════════════════════════

Daily Checks:

1. Check for stuck transfers:
   
   SELECT id, status, requested_at, from_branch_id, to_branch_id
   FROM branch_transfers
   WHERE status IN ('approved', 'in_transit')
   AND requested_at < NOW() - INTERVAL '7 days';

2. Check stock reservations:
   
   SELECT 
     variant_name,
     quantity,
     reserved_quantity,
     (reserved_quantity::float / NULLIF(quantity, 0) * 100) as pct_reserved
   FROM lats_product_variants
   WHERE reserved_quantity > 0
   ORDER BY reserved_quantity DESC;

3. Reconcile inventory:
   
   SELECT 
     b.name as branch,
     COUNT(DISTINCT v.product_id) as products,
     SUM(v.quantity) as total_stock,
     SUM(v.reserved_quantity) as reserved_stock,
     SUM(v.quantity - v.reserved_quantity) as available_stock
   FROM lats_product_variants v
   JOIN store_locations b ON b.id = v.branch_id
   GROUP BY b.id, b.name
   ORDER BY b.name;


═══════════════════════════════════════════════════════════════════════════════
✅ COMPLETION CHECKLIST
═══════════════════════════════════════════════════════════════════════════════

Before considering the fix complete, verify:

□ Database migration executed successfully
□ All 7 functions created
□ Frontend code updated (stockTransferApi.ts)
□ App restarted (npm run dev or similar)
□ Test Case 1 passed (Create with reservation)
□ Test Case 2 passed (Approve validation)
□ Test Case 3 passed (Complete - CRITICAL TEST!)
□ Test Case 4 passed (Reject preserves notes)
□ Test Case 5 passed (Cancel releases stock)
□ Test Case 6 passed (Duplicate prevention)
□ Test Case 7 passed (Variant creation)
□ Verification query shows all ✅
□ No errors in browser console
□ No errors in terminal/server logs
□ Stock levels match before and after transfers
□ Audit trail shows all movements


═══════════════════════════════════════════════════════════════════════════════
🎉 SUCCESS!
═══════════════════════════════════════════════════════════════════════════════

If all checklist items are ✅, your Stock Transfer system is now:

✅ Safe from data loss (Issue #1 FIXED)
✅ Handles cross-branch variants (Issue #2 FIXED)
✅ Transaction-safe with rollback (Issue #3 FIXED)
✅ Full audit trail (Issue #4 FIXED)
✅ Complete transfer data in UI (Issue #5 FIXED)
✅ Branch validation (Issue #6 FIXED)
✅ Permission checks (Issue #7 FIXED)
✅ Workflow validation (Issue #8 FIXED)
✅ Stock reservation system (Issue #9 FIXED)
✅ Cancellation releases stock (Issue #10 FIXED)
✅ Rejection preserves notes (Issue #11 FIXED)
✅ Duplicate prevention (Issue #12 FIXED)

Your system is now PRODUCTION READY! 🚀


═══════════════════════════════════════════════════════════════════════════════
📞 NEED HELP?
═══════════════════════════════════════════════════════════════════════════════

If you encounter issues:

1. Check the 🚨-STOCK-TRANSFER-CRITICAL-ISSUES.txt file for issue details
2. Review error messages carefully
3. Check database logs in Neon dashboard
4. Verify all migration steps completed
5. Ensure you're using the FIXED version of the API file


═══════════════════════════════════════════════════════════════════════════════

